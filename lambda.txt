use this refrence 
https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html

Lambda expressions are one of the important features included in java 8.
 Lambda Expressions are used to write concise code for that interface which
  consist one method i.e. functional interface. Lambda Expression is also use
  d to iterate collection in simple way. For a single method interface whatever
   we achieve by using anonymous class or inner class, the same can be achieved
    using lambda expression in a very concise code in java 8. Lambda expression 
    defines the functional interface method and returns the instance of that interface.
    Lambda Expression Syntax is very easy to read and understand. Lambda Expression Syntax will look like 
    (Argument  part)  -> Body part 
    ample 2 : If method takes two arguments and do some business logic and returns the value. 
(int a, int b) ->  a+b;
The value of a+b will be returned by the method. 

Sample 3: If method takes one argument and do some business logic 
  (String s) ->  s + "Hello World"; 
  
  java.util.Optional class has been introduced in java 8, that will avoid NullPointerException in our code.
   We can write our code more readable and in fewer lines because now we will not apply if else 
   condition for NullPointerException. Optional class will check for null value and if null value is present then it will 
  return empty Optional instance. Before Java 8 we avoid NullPointerException as below. 
  Optional.of()
of() method creates and returns the Optional instance for the given class. We can apply other method of Optional class.
Optional.map()
map() method runs the given method in the argument if the instance is not null otherwise it returns empty Optional instance. The argument which is a function cannot have Optional mapper.
Optional.orElse()
It returns the value in the Optional instance for the mapping method otherwise it returns the value provided in orElse() argument. 

Optional.flatMap()
flatMap () method is same as map() method but the difference is that the method argument which is a function must have Optional mapper. 
Find some more classes. We have a Country class. 




Optional.filter()
filter() method takes Predicate instance as an argument. The value in Optional instance is
 filtered and if filtered value is not empty then value is returned otherwise empty Optional instance is returned. 
 
 Optional.ifPresent()
ifPresent() method takes Consumer instance as an argument and if value is present then it 
run the given consumer passed as an argument otherwise do nothing. 
j
ava.util.function.Predicate is a functional interface introduced in java 8. Predicate is used for assigning a lambda expression.
 The functional interface is test(T t) which returns Boolean value. When we pass the object to this method, 
it evaluates the object over assigned lambda expression. Find the two expressions below.

Predicate<Student> maleStudent = s-> s.age >= 20 && "male".equals(s.gender);
Predicate<Student> femaleStudent = s-> s.age > 15 && "female".equals(s.gender);
First expression creates the scenario for a male student and second expression creates the scenario for female student.
 Find the complete example. 
 java 8 has introduced the concept of functional interface. Functional interface is nothing but a
  simple java interface containing only one method. In the old style functional interface can 
  be used with inner class or anonymous class to implement. But in java 8, we have lambda 
  expressions to use functional interface. The difference is that lambda expression is clean and small code in comparison to inner
  or anonymous class. java.util.function.Function is a functional interface introduced in java 8.
  How to declare Functional Interface in Java 8 | Use @FunctionalInterface
Functional interface will have one method and can have any number of arguments. The interface will be annotated with @FunctionalInterface. By this annotation we ensure that the functional interface will not have more than one method. If we try to add more than one method, then there will be compile time error as Unexpected @FunctionalInterface annotation.
Find the functional interface with no argument.
@FunctionalInterface
public interface Display {
    public String show();    
 }  
 ackage com.concretepage.function;
@FunctionalInterface
public interface Multiply {
    public int multiply(int num);    
}package com.concretepage.function;
@FunctionalInterface
public interface Add {
    public int addData(int n1, int n2);    
}  
/ functional interface with no argument
         Display display = () -> "Functional interface with no argument";
         String s= display.show();
         System.out.println(s);
        // functional interface with one argument
        Multiply multiply = (int num) -> num*10;
        int res= multiply.multiply(5);
        System.out.println(res);
        // functional interface with two argument
        Add add =(int a, int b) -> a+b;
        int rs = add.addData(15, 20);
        System.out.println(rs);
        
        
        Java 8 Stream: filter and map Example
        
        these methods are intermediate operations. Filter filters a stream on the basis of a given
         predicate and returns stream object. And again we can apply other stream methods to this instance.
          Map is stream function that applies a
         given function to all its elements and returns the changed stream. Find the method syntax.
        Stream<T> filter(Predicate<? super T> predicate) 
        We pass predicate as an argument on the basis of which filter method filters the stream and returns the changed stream object.
        <R> Stream<R> map(Function<? super T,? extends R> mapper) 
        
        Stream.filter
Stream.filter filters the calling stream on the basis of given predicate. In the example we have an employee list and created a predicate . 
This predicate will be passed to filter as an argument. Finally we will print the filtered stream. 

usage 

public class FilterDemo {
    public static void main(String[] args) {
        List<Employee> list = Employee.getEmpList();
        Predicate<Employee> filterPredicate = e -> e.id > 1 && e.sal < 6000;
        Consumer<Employee> printConsumer = e -> System.out.println(e.id + ", "+e.sal);
        list.stream().filter(filterPredicate).forEach(printConsumer);
    }
} 
Stream.map
Stream.map transforms one stream into another stream on the basis of given function. 
In the example we have an employee stream and then we converted into player stream using map. 
 List<Employee> list = Employee.getEmpList();
        Stream<Player> players = list.stream().map(e -> new Player(e.id, e.name));
        players.forEach(p -> System.out.println(p.id+ ", "+p.name));
        
        Differences Between Aggregate Operations and Iterators

Aggregate operations, like forEach, appear to be like iterators. However, they have several fundamental differences:

They use internal iteration: Aggregate operations do not contain a method like next to instruct them to process the next element of the collection. With internal delegation, your application determines what collection it iterates, but the JDK determines how to iterate the collection. With external iteration, your application determines both what collection it iterates and how it iterates it. However, external iteration can only iterate over the elements of a collection sequentially. Internal iteration does not have this limitation. It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. See the section Parallelism for more information.
double average = roster
    .stream()
    .filter(p -> p.getGender() == Person.Sex.MALE)
    .mapToInt(Person::getAge)
    .average()
    .getAsDouble();
They process elements from a stream: Aggregate operations process elements from a stream, not directly from a collection. Consequently, they are also called stream operations.

They support behavior as parameters: You can specify lambda expressions as parameters for most aggregate operations. This enables you to customize the behavior of a particular aggregate operation.

The mapToInt operation returns a new stream of type IntStream (which is a stream that contains only integer values). The operation applies the function specified in its parameter to each element in a particular stream. In this example, the function is Person::getAge, which is a method reference that returns the age of the member. (Alternatively, you could use the lambda expression e -> e.getAge().) Consequently, the mapToInt operation in this example returns a stream that contains the ages of all male members in the collection roster.

The average operation calculates the average value of the elements contained in a stream of type IntStream. It returns an object of type OptionalDouble. If the stream contains no elements, then the average operation returns an empty instance of OptionalDouble, and invoking the method getAsDouble throws a NoSuchElementException. The JDK contains many terminal operations such as average that return one value by combining the contents of a stream. These operations are called reduction operations; see the section Reduction for more information.